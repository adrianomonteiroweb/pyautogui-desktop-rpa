"""
Teste Espec√≠fico de Datas Reais - Identifica e clica nas datas detectadas
Baseado na sa√≠da real do OCR da tela do ReceitaNet BX
"""

import time
import pyautogui
import re
from datetime import datetime
import os
import sys

# Adiciona o diret√≥rio atual ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from easyocr_manager import EasyOCRManager


class SpecificDateClickTest:
    
    def __init__(self):
        """Inicializa o teste com EasyOCRManager real"""
        self.ocr_manager = EasyOCRManager()
        
        print("üéØ TESTE ESPEC√çFICO DE DATAS REAIS")
        print("=" * 50)
        print("üìã Este teste ir√°:")
        print("  1. Detectar TODAS as datas reais na tela")
        print("  2. Filtrar apenas as da coluna 'Data In√≠cio'")
        print("  3. Clicar em cada data encontrada")
        print("=" * 50)
    
    def extract_data_inicio_dates(self, screenshot_path):
        """
        Extrai especificamente as datas da coluna Data In√≠cio
        Baseado na posi√ß√£o X da coluna detectada
        """
        print("\nüîç Extraindo datas da coluna 'Data In√≠cio'...")
        
        # Detecta a posi√ß√£o da coluna
        column_image_path = os.path.join("images", "tabelas", "coluna_data_inicio.png")
        column_position = self.ocr_manager.find_column_header_position(column_image_path)
        
        if not column_position:
            print("‚ùå N√£o foi poss√≠vel localizar a coluna Data In√≠cio")
            return []
        
        column_x, column_y = column_position
        print(f"üìç Coluna Data In√≠cio detectada em: ({column_x}, {column_y})")
        
        # L√™ todas as datas da tela
        results = self.ocr_manager.read_text_from_image(screenshot_path)
        data_inicio_dates = []
        
        print(f"\nüîç Analisando textos OCR...")
        
        for bbox, text, confidence in results:
            # Padr√µes rigorosos para formato DD/MM/YYYY
            date_patterns = [
                r'\b(\d{2}/\d{2}/\d{4})\b',  # Padr√£o principal DD/MM/YYYY
                r'(\d{2}/\d{2}/\d{4})',      # Sem word boundary para textos compostos
                # Removido padr√£o r'/(\d{2}/\d{4})' pois n√£o garante DD/MM/YYYY
            ]
            
            x_centro, y_centro = self.ocr_manager._calculate_center_coordinates(bbox)
            
            # Verifica se est√° na coluna Data In√≠cio (aumentando toler√¢ncia para textos compostos)
            x_diff = abs(x_centro - column_x)
            is_in_column = x_diff <= 80.0  # Aumentei toler√¢ncia
            is_below_header = y_centro > column_y
            
            if is_in_column and is_below_header:
                all_matches = []
                
                # Aplica padr√µes rigorosos DD/MM/YYYY
                for pattern in date_patterns:
                    matches = re.findall(pattern, text)
                    # Filtra apenas datas v√°lidas DD/MM/YYYY
                    valid_matches = [m for m in matches if re.match(r'^\d{2}/\d{2}/\d{4}$', m)]
                    all_matches.extend(valid_matches)
                
                # Corre√ß√£o espec√≠fica para '/02/2024' -> '01/02/2024' (mant√©m padr√£o DD/MM/YYYY)
                if '/02/2024' in text and '01' not in text:
                    all_matches.append('01/02/2024')
                    print(f"üîß Corre√ß√£o aplicada: '/02/2024' -> '01/02/2024'")
                
                # Para textos compostos, extrai datas DD/MM/YYYY come√ßadas com '01/'
                composite_pattern = r'(01/\d{2}/2024)'
                composite_matches = re.findall(composite_pattern, text)
                # Valida que s√£o DD/MM/YYYY
                valid_composite = [m for m in composite_matches if re.match(r'^01/\d{2}/2024$', m)]
                all_matches.extend(valid_composite)
                
                # Remove duplicatas e filtra matches inv√°lidos
                unique_matches = list(set([m for m in all_matches if len(m) > 6]))
                
                for match in unique_matches:
                    # Normaliza a data se necess√°rio
                    if match.startswith('/'):
                        match = '01' + match  # Para casos como '/02/2024'
                    
                    # Valida padr√£o rigoroso DD/MM/YYYY e filtros espec√≠ficos
                    if (re.match(r'^01/\d{2}/2024$', match) and 
                        match.startswith('01/') and 
                        match.endswith('/2024') and
                        len(match) == 10):  # Garante formato DD/MM/YYYY exato
                        
                        # Verifica se n√£o √© uma duplicata
                        existing = [d for d in data_inicio_dates if d['date'] == match]
                        if not existing:
                            data_inicio_dates.append({
                                'date': match,
                                'position': (x_centro, y_centro),
                                'text': text,
                                'confidence': confidence
                            })
                            # Identifica o tipo baseado na posi√ß√£o X
                            position_type = "Composto" if x_centro > 500 else "Simples"
                            print(f"‚úÖ Data encontrada: {match} em ({x_centro:.1f}, {y_centro:.1f}) - '{text}' [{position_type}] (conf: {confidence:.2f})")
        
        return data_inicio_dates
    
    def test_real_data_inicio_clicks(self):
        """
        Teste principal: encontra e clica nas datas reais da coluna Data In√≠cio
        """
        print(f"\nüöÄ INICIANDO TESTE DE CLIQUES REAIS...")
        
        try:
            # Captura screenshot
            print("üì∏ Capturando screenshot...")
            screenshot_path = self.ocr_manager.take_screenshot()
            
            # Extrai datas da coluna Data In√≠cio
            data_inicio_dates = self.extract_data_inicio_dates(screenshot_path)
            
            if not data_inicio_dates:
                print("‚ùå Nenhuma data foi encontrada na coluna Data In√≠cio")
                return False
            
            print(f"\n‚úÖ {len(data_inicio_dates)} datas encontradas na coluna Data In√≠cio:")
            print("üìç PADR√ÉO DE POSI√á√ïES OBSERVADO:")
            print("   ‚Ä¢ X ‚âà 459.0: Textos simples (maioria)")
            print("   ‚Ä¢ X ‚âà 524.0: Textos compostos (m√∫ltiplas datas)")
            print("   ‚Ä¢ Y: Incremento progressivo ~18px por linha")
            print()
            for i, date_info in enumerate(data_inicio_dates, 1):
                date = date_info['date']
                x, y = date_info['position']
                text_type = "Composto" if x > 500 else "Simples"
                print(f"  {i}. {date} ‚Üí Posi√ß√£o ({x:.1f}, {y:.1f}) [{text_type}]")
            
            # Confirma√ß√£o do usu√°rio
            print(f"\n‚ö†Ô∏è  Pronto para clicar em {len(data_inicio_dates)} datas!")
            confirmation = input("‚úÖ Pressione ENTER para iniciar os cliques ou 'q' para cancelar: ")
            if confirmation.lower() == 'q':
                print("‚ùå Teste cancelado pelo usu√°rio")
                return False
            
            # Executa os cliques
            print(f"\nüñ±Ô∏è  INICIANDO CLIQUES...")
            successful_clicks = 0
            
            for i, date_info in enumerate(data_inicio_dates, 1):
                date = date_info['date']
                x, y = date_info['position']
                
                print(f"\nüìç Clique {i}/{len(data_inicio_dates)}: {date}")
                print(f"  üéØ Posi√ß√£o: ({x:.1f}, {y:.1f})")
                
                try:
                    # Move mouse suavemente
                    pyautogui.moveTo(x, y, duration=0.8)
                    time.sleep(0.3)
                    
                    # Clica na data
                    pyautogui.click(x, y)
                    print(f"  ‚úÖ Clique executado!")
                    successful_clicks += 1
                    
                    # Pausa entre cliques
                    if i < len(data_inicio_dates):
                        print(f"  ‚è≥ Aguardando 2 segundos...")
                        time.sleep(2.0)
                        
                except Exception as e:
                    print(f"  ‚ùå Erro no clique: {e}")
            
            # Relat√≥rio final
            print(f"\n" + "=" * 50)
            print(f"üìä RESULTADO FINAL:")
            print(f"  ‚Ä¢ Total de datas encontradas: {len(data_inicio_dates)}")
            print(f"  ‚Ä¢ Cliques bem-sucedidos: {successful_clicks}")
            print(f"  ‚Ä¢ Taxa de sucesso: {(successful_clicks/len(data_inicio_dates)*100):.1f}%")
            
            if successful_clicks == len(data_inicio_dates):
                print(f"üéâ TESTE 100% BEM-SUCEDIDO!")
            elif successful_clicks > 0:
                print(f"‚ö†Ô∏è TESTE PARCIALMENTE BEM-SUCEDIDO")
            else:
                print(f"‚ùå TESTE FALHADO")
            
            print("=" * 50)
            return successful_clicks > 0
            
        except Exception as e:
            print(f"‚ùå Erro durante o teste: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def debug_column_detection(self):
        """Debug da detec√ß√£o de coluna e datas"""
        print("\nüîç DEBUG - DETEC√á√ÉO DE COLUNA E DATAS")
        
        try:
            # Screenshot
            screenshot_path = self.ocr_manager.take_screenshot()
            
            # Posi√ß√£o da coluna
            column_image_path = os.path.join("images", "tabelas", "coluna_data_inicio.png")
            column_position = self.ocr_manager.find_column_header_position(column_image_path)
            
            if column_position:
                column_x, column_y = column_position
                print(f"‚úÖ Coluna detectada: ({column_x}, {column_y})")
                
                # Move mouse para mostrar
                pyautogui.moveTo(column_x, column_y, duration=1.0)
                time.sleep(2)
            
            # Todas as datas detectadas
            print(f"\nüîç Todas as datas na tela:")
            self.ocr_manager.debug_all_detected_dates(screenshot_path)
            
            # Datas espec√≠ficas da coluna
            data_inicio_dates = self.extract_data_inicio_dates(screenshot_path)
            print(f"\nüìä Resumo: {len(data_inicio_dates)} datas na coluna Data In√≠cio")
            
        except Exception as e:
            print(f"‚ùå Erro no debug: {e}")


def main():
    """Fun√ß√£o principal com menu"""
    test = SpecificDateClickTest()
    
    # Configura√ß√µes de seguran√ßa
    pyautogui.FAILSAFE = True
    pyautogui.PAUSE = 0.1
    
    print("\nüîí Failsafe ativado: mova o mouse para o canto superior esquerdo para parar")
    print("\nüéØ OP√á√ïES:")
    print("1. Teste completo (detectar + clicar)")
    print("2. Apenas debug (detectar sem clicar)")
    print("3. Sair")
    
    while True:
        choice = input("\n‚û§ Escolha (1-3): ").strip()
        
        if choice == "1":
            print("\n‚ö†Ô∏è ATEN√á√ÉO: Este teste ir√° clicar na tela!")
            print("üì± Certifique-se de que o ReceitaNet BX est√° vis√≠vel")
            confirmation = input("‚úÖ Pressione ENTER para continuar ou 'q' para cancelar: ")
            if confirmation.lower() != 'q':
                test.test_real_data_inicio_clicks()
            break
            
        elif choice == "2":
            test.debug_column_detection()
            break
            
        elif choice == "3":
            print("üëã Saindo...")
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida")


if __name__ == "__main__":
    main()